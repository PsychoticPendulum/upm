#! /usr/bin/env python3

import os
import sys
import getopt
try:
    from unilog import *
except:
    print("ERROR: unilog library not installed")
    exit(1)
LOG.writeToFile = False


package_manager = ""
supported_operating_systems = [
    "linux"
]
supported_package_managers = [
    "yay", "pacman", "xbps-install", "apt", "dnf"
]

def Usage(exit_code):
    print(f"{UTIL.BOLD}Usage:{UTIL.RESET}")
    print(f"    upm [option] [action] [arguments]")
    print(f"")
    print(f"{UTIL.BOLD}Description:{UTIL.RESET}")
    print(f"    upm stands for Universal Package Manager.")
    print(f"    It is a wrapper for your native package manager that is agnostic to distribution")
    print(f"")
    print(f"{UTIL.BOLD}Options:{UTIL.RESET}")
    print(f"    -h, --help        Shows this menu")
    print(f"    -r, --recheck     Prompt the user for input before continuing")
    print(f"")
    print(f"{UTIL.BOLD}Actions:{UTIL.RESET}")
    print(f"    update            Refresh repositories and install all pending updates")
    print(f"    search            Search installed repositories for all packages listed in <arguments>")
    print(f"    install           Install all packages listed in <arguments>")
    print(f"    remove            Remove all packages listed in <arguments>")
    print(f"")
    print(f"{UTIL.BOLD}Examples:{UTIL.RESET}")
    print(f"    upm update        Updates all packages")
    print(f"    upm search vim    Searches for the vim package")
    print(f"    upm install vim   Installs the vim package")
    print(f"    upm remove vim    Uninstalls for the vim package")
    print(f"")
    print(f"{UTIL.BOLD}Supported Operating Systems:{UTIL.RESET}")
    for os in supported_operating_systems:
        print(f"    {os}")
    print(f"")
    print(f"{UTIL.BOLD}Supported Package Managers:{UTIL.RESET}")
    for pm in supported_package_managers:
        print(f"    {pm}")
    exit(exit_code)


def DetectOS():

    if not sys.platform in supported_operating_systems:
        Log(LVL.FAIL, f"Operating System {UTIL.UNDERLINE}{sys.platform}{UTIL.RESET} is {FG.RED}not supported{UTIL.RESET}")

    Log(LVL.INFO, f"Operating System {UTIL.UNDERLINE}{sys.platform}{UTIL.RESET} is {FG.GREEN}supported{UTIL.RESET}")
    return sys.platform


def DetectDistro():
    
    for package_manager in supported_package_managers:
        if os.path.isfile(f"/usr/bin/{package_manager}"):
            Log(LVL.INFO, f"Package Manager detected: {FG.YELLOW}{package_manager}{UTIL.RESET}")
            return package_manager

    Log(LVL.FAIL, "No supported package manager found.")


def Recheck():
    answer = input("Do you want to continue? [Y/n] ").lower()
    if len(answer) == 0 or answer[0] == 'y':
        return 

    Log(LVL.INFO, "Stopping execution on users wish")
    exit(0)


def UniversalPackageManager(package_manager, action, arguments):
    match package_manager:
        case "yay":
            match action:
                case "update":
                    os.system("yay -Syyu")
                case "search":
                    os.system(f"yay -Ss {arguments}")
                case "install":
                    os.system(f"yay -S {arguments}")
                case "remove":
                    os.system(f"yay -Rs {arguments}")
        case "pacman":
            match action:
                case "update":
                    os.system("sudo pacman -Syyu")
                case "search":
                    os.system(f"sudo pacman -Ss {arguments}")
                case "install":
                    os.system(f"sudo pacman -S {arguments}")
                case "remove":
                    os.system(f"sudo pacman -Rs {arguments}")
        case "xbps-install":
            match action:
                case "update":
                    os.system("sudo xbps-install -Syu")
                case "search":
                    os.system(f"sudo xbps-query -Rs {arguments}")
                case "install":
                    os.system(f"sudo xbps-install {arguments}")
                case "remove":
                    os.system(f"sudo xbps-remove -R {arguments}")
        case "apt":
            match action:
                case "update":
                    os.system("sudo apt update && sudo apt upgrade")
                case "search":
                    os.system(f"sudo apt search {arguments}")
                case "install":
                    os.system(f"sudo apt install {arguments}")
                case "remove":
                    os.system(f"sudo apt remove {arguments}")
        case "dnf":
            match action:
                case "update":
                    os.system("sudo dnf update")
                case "search":
                    os.system(f"sudo dnf search {arguments}")
                case "install":
                    os.system(f"sudo dnf install {arguments}")
                case "remove":
                    os.system(f"sudo dnf remove {arguents}")
                
                

    Log(LVL.INFO, "Done")


def main(argv):
    short_options   = "hr"
    long_options    = [
        "help",
        "recheck"
    ]

    try:
        opts, args = getopt.getopt(argv, short_options, long_options)
    except:
        Log(LVL.FAIL, "Invalid command line arguments")

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            Usage(0)
        if opt in ("-r", "--recheck"):
            del argv[0]
            Recheck() 

    if len(args) < 3:
        Log(LVL.FAIL, f"Not enough arguments.\n\tTry running {UTIL.BOLD}upm --help{UTIL.RESET}")

    print(args)

    action      = args[0]
    arguments   = "" 
    for argument in args[1:]:
        arguments += f" {argument}"

    operating_system    = DetectOS()
    package_manager     = DetectDistro()   

    UniversalPackageManager(package_manager, action, arguments)


if __name__ == "__main__":
    main(sys.argv[1:])
    exit(0)
