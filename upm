#! /usr/bin/env python3


#	-------------------
#	|     Imports     |
#	-------------------

import os
import sys
import getopt
try:
    from unilog import *
    LOG.writeToFile = False
except:
    print("ERROR: unilog library not installed")
    exit(1)


#	----------------------
#	|     Base Class     |
#	----------------------

class upm:
    
    # VARS

    version     = "1.2.3"
    pacman      = "undefined"       # package manager
    os          = "undefined"       # operating system
    sos         = [
        "linux", "darwin"
    ]                               # supported operating systems
    spm         = [
        "yay", "pacman", "apt", "dnf", "xbps-install", "brew"
    ]                               # supported package managers

    # FLAGS
    
    fHelp       = False
    fVersion    = False
    fRecheck    = False
    fTrans      = False


#	-----------------------------
#	|     Helping Functions     |
#	-----------------------------

def Usage(exit_code):
    print(f"{UTIL.BOLD}Usage:{UTIL.RESET}")
    print(f"    upm [options] [action] [arguments]")
    print(f"")
    print(f"{UTIL.BOLD}Description:{UTIL.RESET}")
    print(f"    upm stands for Universal Package Manager.")
    print(f"    It is a wrapper for your native package manager that is agnostic to distribution")
    print(f"")
    print(f"{UTIL.BOLD}Options:{UTIL.RESET}")
    print(f"    -h, --help        Shows this menu")
    print(f"    -r, --recheck     Prompt the user for input before continuing")
    print(f"    -v, --version     Shows current version of upm")
    print(f"    -t, --transparent Show the native command")
    print(f"")
    print(f"{UTIL.BOLD}Actions:{UTIL.RESET}")
    print(f"    update            Refresh repositories and install all pending updates")
    print(f"    search            Search installed repositories for all packages listed in <arguments>")
    print(f"    install           Install all packages listed in <arguments>")
    print(f"    remove            Remove all packages listed in <arguments>")
    print(f"")
    print(f"{UTIL.BOLD}Examples:{UTIL.RESET}")
    print(f"    upm update        Updates all packages")
    print(f"    upm search vim    Searches for the vim package")
    print(f"    upm install vim   Installs the vim package")
    print(f"    upm remove vim    Uninstalls for the vim package")
    print(f"")
    print(f"{UTIL.BOLD}Supported Operating Systems:{UTIL.RESET}")
    for os in upm.sos:
        print(f"    {os}")
    print(f"")
    print(f"{UTIL.BOLD}Supported Package Managers:{UTIL.RESET}")
    for pm in upm.spm:
        print(f"    {pm}")
    exit(exit_code)


def Version():
    print(f"upm v{upm.version}")
    exit(0)


def DetectOS():
    if not sys.platform in upm.sos:
        Log(LVL.FAIL, f"Operating System {UTIL.UNDERLINE}{sys.platform}{UTIL.RESET} is {FG.RED}not supported{UTIL.RESET}")
    Log(LVL.INFO, f"Operating System {UTIL.UNDERLINE}{sys.platform}{UTIL.RESET} is\t{FG.GREEN}supported{UTIL.RESET}")
    upm.os = sys.platform

def DetectDistro():
    for pm in upm.spm:
        if os.path.isfile(f"/usr/bin/{pm}") or os.path.isfile(f"/usr/local/bin/{pm}"):
            Log(LVL.INFO, f"Package Manager detected:\t{FG.GREEN}{pm}{UTIL.RESET}")
            upm.pm = pm
            return

    Log(LVL.FAIL, "No supported package manager found.")


def Recheck():
    if not upm.fRecheck:
        return

    try:
        answer = input("Do you want to continue? [Y/n] ").lower()
        if len(answer) == 0 or answer[0] == 'y':
            return
    except KeyboardInterrupt:
        print(f"{UTIL.LEFT}{UTIL.LEFT}  \t{FG.YELLOW}Keyboard Interrupt{UTIL.RESET}") 

    Log(LVL.INFO, "Stopping execution on users wish")
    exit(0)


def SendCommand(command):
    if upm.fTrans:
        print(f"{UTIL.BOLD}{command}{UTIL.RESET}")
    os.system(f"{command}")


#	--------------------------
#	|     Main Functions     |
#	--------------------------

def UniversalPackageManager(package_manager, action, arguments):
    match package_manager:
        case "yay":
            match action:
                case "update":
                    SendCommand("yay -Syyu")
                case "search":
                    SendCommand(f"yay -Ss {arguments}")
                case "install":
                    SendCommand(f"yay -S {arguments}")
                case "remove":
                    SendCommand(f"yay -Rs {arguments}")
        case "pacman":
            match action:
                case "update":
                    SendCommand("sudo pacman -Syyu")
                case "search":
                    SendCommand(f"sudo pacman -Ss {arguments}")
                case "install":
                    SendCommand(f"sudo pacman -S {arguments}")
                case "remove":
                    SendCommand(f"sudo pacman -Rs {arguments}")
        case "xbps-install":
            match action:
                case "update":
                    SendCommand("sudo xbps-install -Syu")
                case "search":
                    SendCommand(f"sudo xbps-query -Rs {arguments}")
                case "install":
                    SendCommand(f"sudo xbps-install {arguments}")
                case "remove":
                    SendCommand(f"sudo xbps-remove -R {arguments}")
        case "apt":
            match action:
                case "update":
                    SendCommand("sudo apt update && sudo apt upgrade")
                case "search":
                    SendCommand(f"sudo apt search {arguments}")
                case "install":
                    SendCommand(f"sudo apt install {arguments}")
                case "remove":
                    SendCommand(f"sudo apt remove {arguments}")
        case "dnf":
            match action:
                case "update":
                    SendCommand("sudo dnf update")
                case "search":
                    SendCommand(f"sudo dnf search {arguments}")
                case "install":
                    SendCommand(f"sudo dnf install {arguments}")
                case "remove":
                    SendCommand(f"sudo dnf remove {arguents}")
        case "brew":
            match action:
                case "update":
                    SendCommand("brew update")
                case "search":
                    SendCommand(f"brew search {arguments}")
                case "install":
                    SendCommand(f"brew install {arguments}")
                case "remove":
                    SendCommand(f"brew uninstall {arguents}")

    Log(LVL.INFO, "Done")


def main(argv):
    short_options   = "hvrt"
    long_options    = [
        "help", "version", "recheck", "transparent"
    ]

    try:
        opts, args = getopt.getopt(argv, short_options, long_options)
    except:
        Log(LVL.FAIL, f"Invalid arguments.\n\tTry running {UTIL.BOLD}upm --help{UTIL.RESET}")

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            Usage(0)
        elif opt in ("-v", "--version"):
            Version()
        elif opt in ("-r", "--recheck"):
            upm.fRecheck    = True
        elif opt in ("-t", "--transparent"):
            upm.fTrans      = True

    if len(args) == 0:
        Log(LVL.FAIL, f"Not enough arguments.\n\tTry running {UTIL.BOLD}upm --help{UTIL.RESET}")

    action      = args[0]
    arguments   = ""
    for argument in args[1:]:
        arguments += f"{argument} "

    DetectOS()
    DetectDistro()
    Recheck()
    UniversalPackageManager(upm.pm, action, arguments)


if __name__ == "__main__":
    if sys.version_info < (3, 10):
        print("ERROR: Python Version 3.10 or higher expected")
        exit(1)
    main(sys.argv[1:])
